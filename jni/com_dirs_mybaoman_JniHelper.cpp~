#include <jni.h>
#include <string>
#include <fstream>
#include "FileHelper.h"
#include "DownloadHelper.h"
#include "com_dirs_mybaoman_JniHelper.h"

//声明下载函数原型
bool Download(std::string);
//声明出错提示原型
void setError(int);
//声明类型转换原型
std::string JstringToString(jstring);

//设置全局变量
jclass g_cls;
jmethodID g_downloadError;
jobject g_obj;
JNIEnv * g_env;
DownloadHelper mDownHelper;
//设置全局变量


//初始化操作
void Java_com_dirs_mybaoman_JniHelper_init(JNIEnv *env, jobject obj)
{
	FileHelper l_mFileHelper;
    LOGD("初始化Native");
    //CachePath = l_mFileHelper.getCachePath();
    g_cls = (jclass)(env->NewGlobalRef(env->GetObjectClass(obj)));
    g_obj = obj;
    g_env = env;
    //判断缓存文件夹是否存在
    if(!l_mFileHelper.checkCacheFolderExits())
    {
        //不存在则创建缓存文件夹
        l_mFileHelper.createCacheFolder();
    }
    //LOGD("Native层:    获取Java层downloadError");
    g_downloadError = env->GetMethodID(g_cls,"downloadError","(I)V");
    //LOGD("Native层:    初始化操作完成！");
}

//获取图片，要求参数为漫画ID，图片ID
//如果当前图片已缓存，返回图片路径，否则返回空，并执行下载操作
jstring Java_com_dirs_mybaoman_JniHelper_getImage(JNIEnv * env, jobject obj, jstring ItemID, jstring ImageID)
{
    std::string _itemID,_imageID;
    //将Jstring转换为std::string
    _itemID = JstringToString(ItemID);
    _imageID = JstringToString(ImageID);

	std::string path;
	path = mDownHelper.getImage(_itemID,_imageID);
	
	//如果发生错误，调用DownloadHelper的getError获取错误码
	//并调用函数setErro通知Java层
	if(path == "error")
	{
	    setError(mDownHelper.getError());
	}
	return env->NewStringUTF(path.c_str());
}

//通知Java层的downloadError更新
void setError(int err)
{
    g_env->CallVoidMethod(g_obj,g_downloadError,err);
}

//将jstring转换为std::string
std::string JstringToString(jstring source)
{
    const char* str;
    str = g_env->GetStringUTFChars(source, false);
    std::string temp(str);
    g_env->ReleaseStringUTFChars(source,str);
    return temp;
}


//清空缓存文件夹
void Java_com_dirs_mybaoman_JniHelper_clearCache(JNIEnv *, jobject)
{
    FileHelper mFileHelper;
    if(!mFileHelper.delImage("all"))
    {
        LOGE("清空缓存文件夹失败");
    }
}


//删除文件，传递文件路径
jboolean Java_com_dirs_mybaoman_JniHelper_delImage(JNIEnv * env, jobject thisz, jstring path)
{
  //将参数Jstring转换为std::string
  std::string _path = JstringToString(path);
  if(0 == _path.length())
  {
    return false;
  }
  else
  {
    //调用FileHelper的成员函数删除
    FileHelper mFileHelper;
    return mFileHelper.delImage(_path);
  }
}

/*
jobject  Java_com_dirs_mybaoman_JniHelper_getBit(JNIEnv * env , jobject thisz)
{
    jclass clz = (jclass)env->FindClass("android/graphics/BitmapFactory");
    jmethodID id = (env)->GetStaticMethodID(clz, "decodeFile", "(Ljava/lang/String;)Landroid/graphics/Bitmap;");
    jstring path = (env)->NewStringUTF("/mnt/sdcard/test.jpg");
    jobject rvalue = (env)->CallStaticObjectMethod(clz, id, path);
    return rvalue;
}
*/
